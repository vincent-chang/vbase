name: LinuxRelease
on:
  workflow_dispatch:
  repository_dispatch:
  push:
    branches:
      - 'vbase'
    tags:
      - '**'
    paths-ignore:
      - '**.md'
      - 'tools/**'
<<<<<<< HEAD
=======
      - '!tools/odbc/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'

  pull_request:
    types: [opened, reopened, ready_for_review]
    paths-ignore:
      - '**.md'
      - 'tools/**'
      - '!tools/odbc/**'
      - '!tools/shell/**'
      - '.github/patches/duckdb-wasm/**'
>>>>>>> main
      - '.github/workflows/**'
      - '!.github/workflows/LinuxRelease.yml'


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  linux-release-x86_64:
    name: Build on ubuntu18.04 x86_64
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/vbase'
    runs-on: ubuntu-latest
    container: ubuntu:18.04
    steps:
      - uses: actions/checkout@v3
        with:
          ref: vbase
          fetch-depth: 0
      - uses: ./.github/actions/ubuntu_18_setup
        with:
          ccache: 1
      - name: Build
        shell: bash
        run: |
          make release
          mkdir -p build/vbase
          cd build
          cp release/duckdb ./vbase/
          cp release/src/libduckdb.so ./vbase/
          ldd release/duckdb |grep -v libc.so| awk '{print $3}'|awk NF|awk '{printf("cp %s vbase/\n",$0)}'|bash
          tar -czvf vbase.Linux_x86_64.tar.gz vbase
      - uses: actions/upload-artifact@v3
        with:
          name: vbase.Linux_x86_64.tar.gz
          path: |
            build/vbase.Linux_x86_64.tar.gz

<<<<<<< HEAD
  linux-release-aarch64:
=======
    - uses: ./.github/actions/ubuntu_18_setup
      with:
        vcpkg: 1
        openssl: 1
        ccache: 1

    - uses: ./.github/actions/build_extensions
      with:
        vcpkg_target_triplet: x64-linux
        post_install: rm build/release/src/libduckdb*
        deploy_as: linux_amd64
        treat_warn_as_error: 0
        run_autoload_tests: ${{ startsWith(github.ref, 'refs/tags/v') && 0 || 1 }}
        run_tests: ${{ startsWith(github.ref, 'refs/tags/v') && 0 || 1 }}
        s3_id: ${{ secrets.S3_ID }}
        s3_key: ${{ secrets.S3_KEY }}
        signing_pk: ${{ secrets.DUCKDB_EXTENSION_SIGNING_PK }}
        ninja: 1

    - uses: actions/upload-artifact@v3
      with:
        name: linux-extensions-64
        path: |
          build/release/extension/*/*.duckdb_extension

 linux-extensions-64-aarch64:
    # Builds extensions for linux_arm64
    name: Linux Extensions (aarch64)
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
>>>>>>> main
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/vbase' || github.repository == 'vincent-chang/vbase'

    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu18.04

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          shell: /bin/bash
          setup: |
            mkdir -p "${PWD}/build"
          dockerRunArgs: |
            --volume "${PWD}:/opt/libhdfs3-src"
          env: |
            artifact_name: libhdfs3.Linux_${{ matrix.arch }}.tar.gz
          install: |
            apt-get update -y -qq
            apt-get install -y -qq software-properties-common
            add-apt-repository ppa:git-core/ppa
            apt-get update -y -qq
            apt-get install -y -qq make cmake gcc g++ automake autoconf wget curl zip libssl-dev unzip libcurl4-gnutls-dev libexpat1-dev gettext build-essential checkinstall libffi-dev libxml2-dev uuid-dev libgtest-dev libkrb5-dev libgsasl7-dev libboost-all-dev
            cd /opt
            wget https://github.com/git/git/archive/refs/tags/v2.18.5.tar.gz
            tar -xzvf v2.18.5.tar.gz
            cd git-2.18.5
            make
            make prefix=/usr install
            git --version
            cd /opt
            wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz 
            tar -xzvf openssl-1.1.1w.tar.gz
            cd openssl-1.1.1w
            ./config --prefix=/usr
            make
            make install
            cd /opt
            wget https://github.com/vincent-chang/protobuf/archive/refs/tags/v3.0.0-autogen-fix.tar.gz
            tar -xzvf v3.0.0-autogen-fix.tar.gz
            cd protobuf-3.0.0-autogen-fix
            ./autogen.sh
            ./configure --prefix=/usr
            make
            make install
            cd /opt
            git clone https://github.com/vincent-chang/libhdfs3.git libhdfs3-src
            mkdir libhdfs3-src/build
            cd libhdfs3-src/build
            ../bootstrap
            make
            make install
            mv ../dist /opt/libhdfs3
          run: |
            make release
            mkdir -p build/vbase
            cd build
            cp release/duckdb ./vbase/
            cp release/src/libduckdb.so ./vbase/
            ldd release/duckdb |grep -v libc.so| awk '{print $3}'|awk NF|awk '{printf("cp %s vbase/\n",$0)}'|bash
            tar -czvf vbase.Linux_${{ matrix.arch }}.tar.gz vbase
      - uses: actions/upload-artifact@v3
        with:
          name: vbase.Linux_${{ matrix.arch }}.tar.gz
          path: |
<<<<<<< HEAD
            build/vbase.Linux_${{ matrix.arch }}.tar.gz
=======
            build/release/extension/*/*.duckdb_extension

 check-load-install-extensions:
    name: Checks extension entries
    if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-20.04
    needs: linux-extensions-64
    env:
      CC: gcc-10
      CXX: g++-10
      GEN: ninja

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install
      shell: bash
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}
        save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}

    - name: Build
      shell: bash
      env:
        DISABLE_BUILTIN_EXTENSIONS: 1
      run: |
        make

    - uses: actions/download-artifact@v3
      with:
        name: linux-extensions-64
        path: /tmp

    - name: Check if extension_entries.hpp is up to date
      shell: bash
      env:
        EXTENSION_CONFIGS: '.github/config/in_tree_extensions.cmake;.github/config/out_of_tree_extensions.cmake'
      run: |
        make extension_configuration
        python scripts/generate_extensions_function.py --validate

 symbol-leakage:
    name: Symbol Leakage
    if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-20.04
    needs: linux-release-64

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.7'

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}
        save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}

    - name: Build
      shell: bash
      run: make

    - name: Symbol Leakage Test
      shell: bash
      run: python3 scripts/exported_symbols_check.py build/release/src/libduckdb*.so

 linux-httpfs:
    name: Linux HTTPFS
    if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-20.04
    needs: linux-release-64
    env:
      BUILD_VISUALIZER: 1
      BUILD_HTTPFS: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_PARQUET: 1
      BUILD_JSON: 1
      S3_TEST_SERVER_AVAILABLE: 1
      AWS_DEFAULT_REGION: eu-west-1
      AWS_ACCESS_KEY_ID: minio_duckdb_user
      AWS_SECRET_ACCESS_KEY: minio_duckdb_user_password
      DUCKDB_S3_ENDPOINT: duckdb-minio.com:9000
      DUCKDB_S3_USE_SSL: false

      GEN: ninja

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.7'

    - name: Install Ninja
      shell: bash
      run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build

    - name: Setup Ccache
      uses: hendrikmuhs/ccache-action@main
      with:
        key: ${{ github.job }}
        save: ${{ github.ref == 'refs/heads/main' || github.repository != 'duckdb/duckdb' }}

    - name: Build
      shell: bash
      run: make

    - name: Start S3/HTTP test server
      shell: bash
      run: |
        sudo ./scripts/install_s3_test_server.sh
        ./scripts/generate_presigned_url.sh
        source ./scripts/run_s3_test_server.sh
        sleep 60

    - name: Test
      shell: bash
      run: |
        python3 scripts/get_test_list.py --file-contains 'require httpfs' --list '"*"' > test.list
        python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '-f test.list'
        python3 scripts/run_tests_one_by_one.py ./build/release/test/unittest '[secret]'

 amalgamation-tests:
    name: Amalgamation Tests
    if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
    needs: linux-release-64
    runs-on: ubuntu-20.04
    env:
      CC: clang
      CXX: clang++

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.7'

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "10.0"

    - name: Generate Amalgamation
      shell: bash
      run:  |
          python scripts/amalgamation.py --extended
          clang++ -std=c++17 -Isrc/amalgamation src/amalgamation/duckdb.cpp -emit-llvm -S -O0
>>>>>>> main
